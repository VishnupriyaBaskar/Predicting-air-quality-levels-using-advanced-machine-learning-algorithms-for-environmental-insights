# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J8ALYtQS99_H1aKSa6V3RBbk2X-1vpTp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

!pip install matplotlib-venn

# https://pypi.python.org/pypi/libarchive
!apt-get -qq install -y libarchive-dev && pip install -U libarchive
import libarchive

# https://pypi.python.org/pypi/pydot
!apt-get -qq install -y graphviz && pip install pydot
import pydot

!pip install cartopy
import cartopy

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('air-quality-india.csv')
print("Dataset Shape:", df.shape)
df.head()

print("Missing Values:\n", df.isnull().sum())

# Drop rows with missing values or handle them as needed (filling or interpolation)
df.dropna(inplace=True)

# üìå 4.2 Check Data Types and Convert if Needed
print("Data Types:\n", df.dtypes)

# If 'Date' is present, convert it to datetime
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)

# üìå 4.3 Explore Data (Statistical Summary)
print("Statistical Summary:\n", df.describe())

# Exclude non-numeric columns such as 'Timestamp'
numeric_df = df.select_dtypes(include=[np.number])

# Plot the correlation heatmap of numeric air quality parameters
plt.figure(figsize=(12, 6))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap of Air Quality Parameters")
plt.show()

df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df['DayOfWeek'] = df['Timestamp'].dt.dayofweek                 # e.g., Monday = 0, Sunday = 6
df['IsWeekend'] = df['DayOfWeek'].isin([5, 6]).astype(int)     # 1 if Saturday or Sunday, else 0

# Lag features (previous time steps)
df['Lag_1'] = df['PM2.5'].shift(1)
df['Lag_2'] = df['PM2.5'].shift(2)

# Rolling averages
df['Rolling_3hr'] = df['PM2.5'].rolling(window=3).mean()
df['Rolling_6hr'] = df['PM2.5'].rolling(window=6).mean()

# Drop rows with NaN from lag/rolling
df.dropna(inplace=True)

feature_columns = ['Year', 'Month', 'Day', 'Hour', 'DayOfWeek', 'IsWeekend',
                   'Lag_1', 'Lag_2', 'Rolling_3hr', 'Rolling_6hr']
target_column = 'PM2.5'

X = df[feature_columns]
y = df[target_column]

X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

from sklearn.ensemble import RandomForestRegressor # Import the RandomForestRegressor class

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

from sklearn.ensemble import RandomForestRegressor # Import the RandomForestRegressor class
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score # Import metrics

# Consider reducing n_estimators or adjusting other parameters
model = RandomForestRegressor(n_estimators=50, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# ... rest of the code remains the same

plt.figure(figsize=(12, 5))
plt.plot(y_test.values[:100], label='Actual PM2.5')
plt.plot(y_pred[:100], label='Predicted PM2.5')
plt.title('Actual vs Predicted PM2.5 (First 100 test samples)')
plt.xlabel('Time (Index)')
plt.ylabel('PM2.5')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import joblib

# Save the trained model
joblib.dump(model, "pm25_model.pkl")

import datetime
import joblib
import pandas as pd

year = int(input("Enter year (e.g., 2024): "))
month = int(input("Enter month (1-12): "))
day = int(input("Enter day (1-31): "))
hour = int(input("Enter hour (0-23): "))

lag_1 = float(input("Enter PM2.5 value 1 hour ago: "))
lag_2 = float(input("Enter PM2.5 value 2 hours ago: "))
rolling_3hr = float(input("Enter 3-hour rolling average PM2.5: "))
rolling_6hr = float(input("Enter 6-hour rolling average PM2.5: "))

# Calculate day_of_week and is_weekend
timestamp = datetime.datetime(year, month, day, hour)
day_of_week = timestamp.weekday()
is_weekend = int(day_of_week in [5, 6])

# Create features DataFrame
features = pd.DataFrame([[
    year, month, day, hour,
    day_of_week, is_weekend,
    lag_1, lag_2, rolling_3hr, rolling_6hr  # Corrected indentation
]], columns=[
    'Year', 'Month', 'Day', 'Hour',
    'DayOfWeek', 'IsWeekend',
    'Lag_1', 'Lag_2', 'Rolling_3hr', 'Rolling_6hr'
])

# Load the model and make prediction
model = joblib.load("pm25_model.pkl")
prediction = model.predict(features)[0]
print(f"\nüå´Ô∏è Predicted PM2.5 level: {prediction:.2f} ¬µg/m¬≥")

import ipywidgets as widgets
from IPython.display import display
import pandas as pd
import datetime
import joblib

# Define input widgets
year = widgets.IntText(description='Year:', value=2024)
month = widgets.IntSlider(description='Month:', min=1, max=12, value=5)
day = widgets.IntSlider(description='Day:', min=1, max=31, value=13)
hour = widgets.IntSlider(description='Hour:', min=0, max=23, value=12)

lag_1 = widgets.FloatText(description='Lag_1 PM2.5:', value=100.0)
lag_2 = widgets.FloatText(description='Lag_2 PM2.5:', value=90.0)
rolling_3hr = widgets.FloatText(description='3hr Avg:', value=95.0)
rolling_6hr = widgets.FloatText(description='6hr Avg:', value=92.0)

# Display widgets
display(year, month, day, hour, lag_1, lag_2, rolling_3hr, rolling_6hr)

# Button to trigger prediction
button = widgets.Button(description="Predict PM2.5")
output = widgets.Output()

def on_click(b):
    with output:
        output.clear_output()
        timestamp = datetime.datetime(year.value, month.value, day.value, hour.value)
        dow = timestamp.weekday()
        is_weekend = int(dow in [5, 6])

        X_input = pd.DataFrame([[
            year.value, month.value, day.value, hour.value,
            dow, is_weekend,
            lag_1.value, lag_2.value, rolling_3hr.value, rolling_6hr.value
        ]], columns=[
            'Year', 'Month', 'Day', 'Hour',
            'DayOfWeek', 'IsWeekend',
            'Lag_1', 'Lag_2', 'Rolling_3hr', 'Rolling_6hr'
        ])

        model = joblib.load("pm25_model.pkl")
        pred = model.predict(X_input)[0]
        print(f"üå´Ô∏è Predicted PM2.5: {pred:.2f} ¬µg/m¬≥")

button.on_click(on_click)
display(button, output)